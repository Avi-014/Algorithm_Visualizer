<resources xmlns:tools="http://schemas.android.com/tools">
    <string name="app_name">AlgoViz</string>

    <!-- Actions -->
    <string name="find_and_replace">Find And Replace</string>
    <string name="search_keyword">Search keyword</string>
    <string name="find_previous_match">Find previous Match</string>
    <string name="find_next_match">Find Next Match</string>
    <string name="replacement">Replacement</string>
    <string name="replace_all">Replace all</string>
    <string name="clear_text">Clear Text</string>
    <string name="comment">Comment</string>
    <string name="uncomment">UnComment</string>
    <string name="relative_line_number">Relative Line Number</string>
    <string name="undo">Undo</string>
    <string name="redo">Redo</string>

    <!-- Programming Languages -->
    <string name="languages">Languages</string>
    <string name="java"> Java </string>
    <string name="python"> Python </string>
    <string name="go"> Go </string>

    <!-- Themes -->
    <string name="themes">Themes</string>
    <string name="monokia">Monokia</string>
    <string name="noctics_white">Noctics White</string>
    <string name="five_color_dark">Five Color Dark</string>
    <string name="orange_box">Orange Box</string>

    <string name="source_position">%1$d:%2$d</string>


    <string name="binary_search_java">
                <![CDATA[
                int binarySearch(int[] arr, int target) {\n
                \tint low = 0;\n
                \tint high = arr.length - 1;\n\n
                \twhile (low <= high) {\n
                \t\tint mid = (low + high) / 2;\n\n
                \t\tif (arr[mid] == target) {\n
                \t\t\treturn mid;\n
                \t\t} else if (arr[mid] < target) {\n
                \t\t\tlow = mid + 1;\n
                \t\t} else {\n
                \t\t\thigh = mid - 1;\n
                \t\t}\n
                \t}\n\n
                \treturn -1;\n
                }
                ]]>
    </string>


    <string name="linear_search_java">
                <![CDATA[
                int linearSearch(int[] arr, int target) {\n
                \tfor (int i = 0; i < arr.length; i++) {\n
                \t\tif (arr[i] == target) {\n
                \t\t\treturn i;\n
                \t\t}\n
                \t}\n\n
                \treturn -1;\n
                }
                ]]>
    </string>


    <string name="dfs_code">
            <![CDATA[
            void dfs(int node, boolean[] visited, List<List<Integer>> adjacencyList) {\n
            \tvisited[node] = true;\n
            \tSystem.out.print(node + " ");\n\n
            \tList<Integer> neighbors = adjacencyList.get(node);\n
            \tfor (int neighbor : neighbors) {\n
            \t\tif (!visited[neighbor]) {\n
            \t\t\tdfs(neighbor, visited, adjacencyList);\n
            \t\t}\n
            \t}\n
            }
            ]]>
    </string>

    <string name="bfs_code">
            <![CDATA[
            void bfs(int startNode, List<List<Integer>> adjacencyList) {\n
            \tboolean[] visited = new boolean[adjacencyList.size()];\n
            \tQueue<Integer> queue = new LinkedList<>();\n\n
            \tvisited[startNode] = true;\n
            \tqueue.offer(startNode);\n\n
            \twhile (!queue.isEmpty()) {\n
            \t\tint node = queue.poll();\n
            \t\tSystem.out.print(node + " ");\n\n
            \t\tList<Integer> neighbors = adjacencyList.get(node);\n
            \t\tfor (int neighbor : neighbors) {\n
            \t\t\tif (!visited[neighbor]) {\n
            \t\t\t\tvisited[neighbor] = true;\n
            \t\t\t\tqueue.offer(neighbor);\n
            \t\t\t}\n
            \t\t}\n
            \t}\n
            }
            ]]>
    </string>

    <string name="fibonacci_series_code">
            <![CDATA[
            int[] fibonacciSeries(int n) {\n
            \tint[] series = new int[n];\n
            \tif (n >= 1) {\n
            \t\tseries[0] = 0;\n
            \t}\n
            \tif (n >= 2) {\n
            \t\tseries[1] = 1;\n
            \t}\n\n
            \tfor (int i = 2; i < n; i++) {\n
            \t\tseries[i] = series[i - 1] + series[i - 2];\n
            \t}\n\n
            \treturn series;\n
            }
            ]]>
    </string>

    <string name="insertion_sort_code" tools:ignore="TypographyDashes">
            <![CDATA[
            void insertionSort(int[] arr) {\n
            \tint n = arr.length;\n
            \tfor (int i = 1; i < n; i++) {\n
            \t\tint key = arr[i];\n
            \t\tint j = i - 1;\n\n
            \t\twhile (j >= 0 && arr[j] > key) {\n
            \t\t\tarr[j + 1] = arr[j];\n
            \t\t\tj--;\n
            \t\t}\n\n
            \t\tarr[j + 1] = key;\n
            \t}\n
            }
            ]]>
    </string>

    <string name="selection_sort_code">
            <![CDATA[
            void selectionSort(int[] arr) {\n
            \tint n = arr.length;\n
            \tfor (int i = 0; i < n - 1; i++) {\n
            \t\tint minIndex = i;\n
            \t\tfor (int j = i + 1; j < n; j++) {\n
            \t\t\tif (arr[j] < arr[minIndex]) {\n
            \t\t\t\tminIndex = j;\n
            \t\t\t}\n
            \t\t}\n\n
            \t\tint temp = arr[minIndex];\n
            \t\tarr[minIndex] = arr[i];\n
            \t\tarr[i] = temp;\n
            \t}\n
            }
            ]]>
    </string>


    <string name="bubble_sort_code">
            <![CDATA[
            void bubbleSort(int[] arr) {\n
            \tint n = arr.length;\n
            \tfor (int i = 0; i < n - 1; i++) {\n
            \t\tfor (int j = 0; j < n - i - 1; j++) {\n
            \t\t\tif (arr[j] > arr[j + 1]) {\n
            \t\t\t\tint temp = arr[j];\n
            \t\t\t\tarr[j] = arr[j + 1];\n
            \t\t\t\tarr[j + 1] = temp;\n
            \t\t\t}\n
            \t\t}\n
            \t}\n
            }
            ]]>
    </string>

    <string name="merge_sort_code">
                <![CDATA[
                void mergeSort(int[] arr, int left, int right) {\n
                \tif (left < right) {\n
                \t\tint mid = (left + right) / 2;\n\n
                \t\tmergeSort(arr, left, mid);\n
                \t\tmergeSort(arr, mid + 1, right);\n\n
                \t\tmerge(arr, left, mid, right);\n
                \t}\n
                }\n\n
                void merge(int[] arr, int left, int mid, int right) {\n
                \tint n1 = mid - left + 1;\n
                \tint n2 = right - mid;\n\n
                \tint[] leftArr = new int[n1];\n
                \tint[] rightArr = new int[n2];\n\n
                \tfor (int i = 0; i < n1; i++) {\n
                \t\tleftArr[i] = arr[left + i];\n
                \t}\n
                \tfor (int j = 0; j < n2; j++) {\n
                \t\trightArr[j] = arr[mid + 1 + j];\n
                \t}\n\n
                \tint i = 0, j = 0, k = left;\n\n
                \twhile (i < n1 && j < n2) {\n
                \t\tif (leftArr[i] <= rightArr[j]) {\n
                \t\t\tarr[k] = leftArr[i];\n
                \t\t\ti++;\n
                \t\t} else {\n
                \t\t\tarr[k] = rightArr[j];\n
                \t\t\tj++;\n
                \t\t}\n
                \t\tk++;\n
                \t}\n\n
                \twhile (i < n1) {\n
                \t\tarr[k] = leftArr[i];\n
                \t\ti++;\n
                \t\tk++;\n
                \t}\n\n
                \twhile (j < n2) {\n
                \t\tarr[k] = rightArr[j];\n
                \t\tj++;\n
                \t\tk++;\n
                \t}\n
                }
                ]]>
    </string>



</resources>